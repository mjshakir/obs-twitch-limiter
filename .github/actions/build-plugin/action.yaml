name: Set up and build plugin
description: Builds the plugin for specified architecture and build config
inputs:
  target:
    description: Target architecture for dependencies
    required: true
  config:
    description: Build configuration
    required: false
    default: RelWithDebInfo
  codesign:
    description: Enable codesigning (macOS only)
    required: false
    default: 'false'
  codesignIdent:
    description: Developer ID for application codesigning (macOS only)
    required: false
    default: '-'
  workingDirectory:
    description: Working directory for packaging
    required: false
    default: ${{ github.workspace }}
runs:
  using: composite
  steps:
    - name: Install Dependencies üõçÔ∏è (Ubuntu)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y libboost-all-dev rapidjson-dev libobs-dev

    - name: Install Dependencies üõçÔ∏è (macOS)
      if: runner.os == 'macOS'
      shell: zsh --no-rcs --errexit --pipefail {0}
      run: |
        brew update
        brew install boost rapidjson obs

    # - name: Install Dependencies üõçÔ∏è (Windows)
    #   if: runner.os == 'Windows'
    #   shell: pwsh
    #   run: |
    #     # choco install boost-msvc-14.3 -y
    #     # choco install ninja -y

    #     # Clone & bootstrap vcpkg
    #     git clone https://github.com/microsoft/vcpkg.git
    #     .\vcpkg\bootstrap-vcpkg.bat

    #     # Install the libraries
    #     .\vcpkg\vcpkg install boost-system boost-json rapidjson
    #     .\vcpkg\vcpkg integrate install

    #     # Manually export VCPKG_ROOT so next steps can see it
    #     $vcpkgRoot = (Resolve-Path ".\vcpkg").Path
    #     echo "VCPKG_ROOT=$vcpkgRoot" | Out-File -FilePath $env:GITHUB_ENV -Append
        
    #     # Also ensure that the path to ninja is on PATH for subsequent steps
    #     # echo "PATH=C:\ProgramData\chocolatey\bin;$($env:PATH)" | Out-File -FilePath $env:GITHUB_ENV -Append

    # - name: Install Dependencies üõçÔ∏è (Windows)
    #   if: runner.os == 'Windows'
    #   shell: pwsh
    #   run: |
    #     git clone https://github.com/microsoft/vcpkg.git
    #     .\vcpkg\bootstrap-vcpkg.bat
    #     # Specify the overlay port directory (assume you've placed it at <repo>/vcpkg_ports)
    #     $overlay = "$env:GITHUB_WORKSPACE\vcpkg_ports"
    #     .\vcpkg\vcpkg install boost-system boost-json rapidjson libobs --overlay-ports=$overlay
    #     .\vcpkg\vcpkg integrate install
    #   env:
    #     VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    # - name: Build libobs from source (Windows)
    #   if: runner.os == 'Windows'
    #   shell: pwsh
    #   run: |
    #     # Clone OBS Studio
    #     git clone --recursive https://github.com/obsproject/obs-studio.git
    #     cd obs-studio

    #     # Use backticks for multiline in PowerShell.
    #     # Force MSVC by using the Ninja generator with -A x64 -T host=x64
    #     # cmake .. -A x64 -T host=x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_BROWSER=OFF -DBUILD_OBSCONTROL=OFF -DCMAKE_INSTALL_PREFIX="$env:AGENT_WORKFOLDER\libobs" -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" -B build -G Ninja
    #     cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_BROWSER=OFF -DBUILD_OBSCONTROL=OFF -DCMAKE_INSTALL_PREFIX="$env:AGENT_WORKFOLDER\libobs" -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" -B build
    #     cd build
    #     # Build & Install libobs
    #     cmake --build . --config Release --target install

    #     # Expose the libobs_DIR path to future steps if needed
    #     echo "libobs_DIR=$env:AGENT_WORKFOLDER\libobs\lib\cmake\libobs" | Out-File -FilePath $env:GITHUB_ENV -Append

    # - name: Build libobs from source (Windows)
    #   if: runner.os == 'Windows'
    #   shell: pwsh
    #   run: |
    #     git clone --recursive https://github.com/obsproject/obs-studio.git
    #     cd obs-studio
    #     cmake -B build -A x64 -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE\libobs" -DCMAKE_BUILD_TYPE=Release -DBUILD_BROWSER=OFF -DBUILD_OBSCONTROL=OFF
    #     cmake --build build --config Release --target install

    #     $LibobsPath = Join-Path $env:GITHUB_WORKSPACE "libobs\lib\cmake\libobs"
    #     echo "libobs_DIR=$LibobsPath" | Out-File -FilePath $env:GITHUB_ENV -Append

    # - name: Build libobs from source (Windows)
    #   if: runner.os == 'Windows'
    #   shell: pwsh
    #   run: |
    #     git clone --recursive https://github.com/obsproject/obs-studio.git
    #     cd obs-studio
    #     cmake -B build -A x64 -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE\libobs" -DCMAKE_BUILD_TYPE=Release -DBUILD_BROWSER=OFF -DBUILD_OBSCONTROL=OFF
    #     cmake --build build --config Release --target install

    #     $LibobsPath = Join-Path $env:GITHUB_WORKSPACE "libobs\lib\cmake\libobs"
    #     echo "libobs_DIR=$LibobsPath" | Out-File -FilePath $env:GITHUB_ENV -Append

    # - name: Build libobs from source (Windows)
    #   if: runner.os == 'Windows'
    #   shell: pwsh
    #   run: |
    #     git clone --recursive https://github.com/obsproject/obs-studio.git
    #     cd obs-studio
    #     cmake -B build -A x64 -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE\libobs" -DCMAKE_BUILD_TYPE=Release -DBUILD_BROWSER=OFF -DBUILD_OBSCONTROL=OFF
    #     cmake --build build --config Release --target install

    #     # Set environment variables for libobs (for the overlay port)
    #     $LibobsPath = Join-Path $env:GITHUB_WORKSPACE "libobs\lib\cmake\libobs"
    #     echo "libobs_DIR=$LibobsPath" | Out-File -FilePath $env:GITHUB_ENV -Append
    #     echo "LIBOBS_INSTALL_DIR=$LibobsPath" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Build libobs from source (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        git clone --recursive https://github.com/obsproject/obs-studio.git
        cd obs-studio
        cmake -B build -A x64 -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE\libobs" -DCMAKE_BUILD_TYPE=Release -DBUILD_BROWSER=OFF -DBUILD_OBSCONTROL=OFF
        cmake --build build --config Release --target install

        # Set both environment variables so that the overlay port sees libobs.
        $LibobsPath = Join-Path $env:GITHUB_WORKSPACE "libobs\lib\cmake\libobs"
        echo "libobs_DIR=$LibobsPath" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "LIBOBS_INSTALL_DIR=$LibobsPath" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Install Dependencies üõçÔ∏è (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        $overlay = "$env:GITHUB_WORKSPACE\vcpkg_ports"
        .\vcpkg\vcpkg install boost-system boost-json rapidjson libobs --overlay-ports=$overlay
        .\vcpkg\vcpkg integrate install
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg

        
    - name: Run macOS Build
      if: runner.os == 'macOS'
      shell: zsh --no-rcs --errexit --pipefail {0}
      working-directory: ${{ inputs.workingDirectory }}
      env:
        CCACHE_DIR: ${{ inputs.workingDirectory }}/.ccache
        CODESIGN_IDENT: ${{ inputs.codesignIdent }}
        CODESIGN_TEAM: ${{ inputs.codesignTeam }}
      run: |
        : Run macOS Build

        local -a build_args=(--config ${{ inputs.config }})
        if (( ${+RUNNER_DEBUG} )) build_args+=(--debug)

        if [[ '${{ inputs.codesign }}' == 'true' ]] build_args+=(--codesign)

        .github/scripts/build-macos ${build_args}

    - name: Install Dependencies üõçÔ∏è
      if: runner.os == 'Linux'
      shell: bash
      run: |
        : Install Dependencies üõçÔ∏è
        echo ::group::Install Dependencies
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        echo "/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH
        brew install --quiet zsh
        echo ::endgroup::

    - name: Run Ubuntu Build
      if: runner.os == 'Linux'
      shell: zsh --no-rcs --errexit --pipefail {0}
      working-directory: ${{ inputs.workingDirectory }}
      env:
        CCACHE_DIR: ${{ inputs.workingDirectory }}/.ccache
      run: |
        : Run Ubuntu Build

        local -a build_args=(
          --target ubuntu-${{ inputs.target }}
          --config ${{ inputs.config }}
        )
        if (( ${+RUNNER_DEBUG} )) build_args+=(--debug)

        .github/scripts/build-ubuntu ${build_args}

    - name: Run Windows Build
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Run Windows Build
        if ( $Env:RUNNER_DEBUG -ne $null ) {
          Set-PSDebug -Trace 1
        }

        $BuildArgs = @{
          Target = '${{ inputs.target }}'
          Configuration = '${{ inputs.config }}'
        }

        .github/scripts/Build-Windows.ps1 @BuildArgs

    # - name: Run Windows Build
    #   if: runner.os == 'Windows'
    #   shell: pwsh
    #   run: |
    #     .github/scripts/Build-Windows.ps1 -Target x64 -Configuration RelWithDebInfo

    # - name: Run Windows Build
    #   if: runner.os == 'Windows'
    #   shell: pwsh
    #   run: |
    #     if ($Env:RUNNER_DEBUG) { Set-PSDebug -Trace 1 }
    #     $BuildArgs = @{
    #       Target = 'x64'
    #       Configuration = 'RelWithDebInfo'
    #     }
    #     .github/scripts/Build-Windows.ps1 @BuildArgs

    # - name: Run Windows Build
    #   if: runner.os == 'Windows'
    #   shell: pwsh
    #   run: |
    #     if ($Env:RUNNER_DEBUG) { Set-PSDebug -Trace 1 }
    #     $BuildArgs = @{
    #       Target = 'x64'
    #       Configuration = 'RelWithDebInfo'
    #     }
    #     .github/scripts/Build-Windows.ps1 @BuildArgs

  
    - name: Create Summary üìä
      if: contains(fromJSON('["Linux", "macOS"]'),runner.os)
      shell: zsh --no-rcs --errexit --pipefail {0}
      env:
        CCACHE_DIR: ${{ inputs.workingDirectory }}/.ccache
      run: |
        : Create Summary üìä

        local -a ccache_data
        if (( ${+RUNNER_DEBUG} )) {
          setopt XTRACE
          ccache_data=("${(fA)$(ccache -s -vv)}")
        } else {
          ccache_data=("${(fA)$(ccache -s)}")
        }

        print '### ${{ runner.os }} Ccache Stats (${{ inputs.target }})' >> $GITHUB_STEP_SUMMARY
        print '```' >> $GITHUB_STEP_SUMMARY
        for line (${ccache_data}) {
          print ${line} >> $GITHUB_STEP_SUMMARY
        }
        print '```' >> $GITHUB_STEP_SUMMARY
